{"version":3,"sources":["Components/layout/Header.js","context.js","Components/contacts/Contact.js","Components/contacts/Contacts.js","Components/layout/TextInput.js","Components/contacts/AddContact.js","Components/pages/NotFound.js","Components/pages/About.js","Components/test/Test.js","Components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","defaultProps","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","a","delete","name","email","phone","onClick","style","cursor","bind","float","color","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","target","onSubmit","preventDefault","newContact","post","history","push","TextInput","NotFound","About","Test","title","body","fetch","then","response","json","EditContact","updContact","match","params","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9583f6c6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n                <div>\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\" className=\"nav-link\">\n                                <i className=\"fas fa-home\"></i>Home\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/contact/add\" className=\"nav-link\">\n                            <i className=\"fas fa-plus\"></i>\n                                Add\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/about\" className=\"nav-link\">\n                            <i className=\"fas fa-question\"></i>\n                                About\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            \n        </nav>\n       \n    )\n};\nHeader.defaultProps = {\n    branding: \"My App\"\n}\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport axios from 'axios'\nconst Context = React.createContext();\nconst reducer = (state,action) =>{\n    switch(action.type) {\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => \n                    contact.id !== action.payload\n                )\n                }\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n                \n                }\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? contact = action.payload : contact),\n            }\n        default: \n            return state;\n\n    }\n}\n// Global State \nexport class Provider extends Component {\n    state = {\n        contacts: [\n            \n        ],dispatch: action => {\n            this.setState(state => reducer(state,action))\n        }\n    }\n    async componentDidMount(){\n        const res = await axios\n        .get('https://jsonplaceholder.typicode.com/users');\n\n        this.setState({contacts: res.data});\n\n    }\n    render(){\n        return (\n            <Context.Provider value={this.state}>{this.props.children}</Context.Provider>\n        )\n    }\n}\n\nexport  const Consumer = Context.Consumer;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Consumer } from '../../context' ;\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nclass Contact extends Component {\n\n    state = {\n        showContactInfo: false\n    }\n\n    onShowClick = (e) => {\n        this.setState({showContactInfo: !this.state.showContactInfo});\n        this.className = \"fas fa-sort-down\";\n    }\n    \n    onDeleteClick = async (id,dispatch) => {\n        try{\n            await axios\n            .delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n            dispatch({type: 'DELETE_CONTACT',payload : id})\n        }  catch(e){\n            dispatch({type: 'DELETE_CONTACT',payload : id})\n        }\n       \n    }\n\n    render() {\n        const {id,name,email,phone} = this.props.contact;\n        const {showContactInfo} = this.state\n        return (\n            <Consumer> \n                {value => {\n                    const { dispatch } = value;\n                return <div className=\"card card-body mb-3\"> \n                <h4>{name} <i onClick={this.onShowClick} className=\"fas fa-sort-down\" style={{cursor: 'pointer'}}></i>\n                <i onClick= {this.onDeleteClick.bind(this,id,dispatch)} className=\"fas fa-times\" style={{cursor: 'pointer',float: 'right', color: 'red'}}></i>\n                <Link to={`contact/edit/${id}`}><i className=\"fas fa-pencil-alt\" style={{cursor: 'pointer',float: 'right',color:'black', marginRight: '1rem'}} ></i></Link>\n                </h4>\n                {showContactInfo ? (<ul className = \"list-group\">\n                    <li className=\"list-group-item\"> Email: {email}</li>\n                    <li className = \"list-group-item\">Phone: {phone}</li>\n                </ul>) : null }\n                                               \n            </div>\n                }}\n            </Consumer>\n            \n        )\n    }\n}\nContact.propTypes = {\n    contact: PropTypes.object.isRequired,\n}\nexport default Contact;\n\n","import React, { Component } from 'react'\nimport Contact from './Contact'\nimport {Consumer} from '../../context'\nclass Contacts extends Component {\n\n      \n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    const {contacts} = value;\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className=\"text-danger\">Contact </span>\n                                List \n                            </h1> \n                            {contacts.map(contact => (\n                           <Contact key={contact.id} contact={contact}/>\n                        ))}\n                    </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n\n}\n\nexport default Contacts;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames' \nconst TextInputGroup = ({label,name,value,placeholder,type,onChange,error}) => {\n    return (\n        <div className=\"form-group\">\n                            <label htmlFor = \"name\"> {label} </label>\n                            <input type={type}\n                                   name={name}\n                                   className={classnames('form-control form-control-lg',{\"is-invalid\":error})}\n                                   placeholder={placeholder}\n                                   value={value}\n                                   onChange={onChange}\n                                   />\n                                   {error && <div\n                                   className=\"invalid-feedback\">{error}</div>}\n                                    </div>\n    )\n};\n\nTextInputGroup.propTypes = {\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    label: PropTypes.string.isRequired,\n    error: PropTypes.string\n\n}\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\n\nexport default TextInputGroup;","import React, { Component } from 'react'\nimport { Consumer } from '../../context'\nimport TextInputGroup from '../layout/TextInput'\nimport axios from 'axios'\n\n class AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n    \n    onSubmit = async  (dispatch,e) => {\n        e.preventDefault();\n        const {name,email,phone} = this.state;\n\n        // Check for errors\n        if(name === ''){\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            })\n            return\n        }\n        if(email === ''){\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            })\n            return\n        }\n        if(phone === ''){\n            this.setState({\n                errors: {\n                    phone : 'Phone is required'\n                }\n            })\n            return\n        }\n\n        const newContact = {\n            name,\n            email,\n            phone\n        }\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users',newContact)\n             \n        dispatch({type: 'ADD_CONTACT',payload : res.data})\n        // Clearing State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        })\n        this.props.history.push('/');\n    }\n    render() {\n        const {name,email,phone,errors} = this.state;\n        return(\n        <Consumer>{\n            value => {\n                const {dispatch} = value;\n                return(\n                <div className=\"card mb-3\">\n                <div className=\"card-header\">\n                    Add Contact\n                </div>\n                <div className=\"card-body\">\n                    <form onSubmit= {this.onSubmit.bind(this,dispatch)}>\n                       <TextInputGroup\n                                label=\"Name\"\n                                name=\"name\"\n                                placeholder=\"Enter Name\"\n                                value = {name}\n                                onChange={this.onChange}\n                                error={errors.name}\n                                />\n                         <TextInputGroup\n                                label=\"Email\"\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"Enter Email\"\n                                value = {email}\n                                onChange={this.onChange}\n                                error={errors.email}\n                                \n                                />\n                         <TextInputGroup\n                                label=\"Phone\"\n                                name=\"phone\"\n                                placeholder=\"Enter Phone\"\n                                value = {phone}\n                                onChange={this.onChange}\n                                error={errors.phone}\n                                />            \n                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\"/>\n                    </form>\n                </div>\n            </div>\n                )\n            }\n            \n            \n            }</Consumer>\n        )\n    }\n}\nexport default AddContact;","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <h1 className=\"display-4\">\n                <span className=\"text-danger\"> 404 </span>Page Not Found\n            </h1>\n            <p className=\"lead\">Sorry page was not found on this server.</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div>\n            <h3 className=\"display-4\">About Contact Manager</h3>\n            <p className=\"lead\"> Simple app to manage contacts</p>\n            <p className=\"text-secondary\"> Version 1.0.0</p>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\n\nclass Test extends Component {\n    state = {\n        title: '',\n        body: ''\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\n        .then(response => response.json())\n        .then(data => this.setState({\n            title: data.title,\n            body: data.body\n        }));\n    }\n\n    render() {\n        const {title, body} = this.state;\n        return (\n            <div>\n                <h1> {title} </h1>\n                <p>{body}</p>\n            </div>\n        )\n    }\n}\nexport default Test;","import React, { Component } from 'react'\nimport { Consumer } from '../../context'\nimport TextInputGroup from '../layout/TextInput'\nimport axios from 'axios'\n\n class EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n    async componentDidMount() { \n        const { id } = this.props.match.params;\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\n        const contact = res.data;\n\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        })\n    }\n\n\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n    \n    onSubmit = async  (dispatch,e) => {\n        e.preventDefault();\n        const {name,email,phone} = this.state;\n\n        // Check for errors\n        if(name === ''){\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            })\n            return\n        }\n        if(email === ''){\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            })\n            return\n        }\n        if(phone === ''){\n            this.setState({\n                errors: {\n                    phone : 'Phone is required'\n                }\n            })\n            return\n        }\n        const updContact = {\n            name,\n            email,\n            phone\n        }\n        const {id} = this.props.match.params;\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`,updContact);\n        dispatch({type: 'UPDATE_CONTACT',payload: res.data});\n       \n        // Clearing State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        })\n        this.props.history.push('/');\n    }\n    render() {\n        const {name,email,phone,errors} = this.state;\n        return(\n        <Consumer>{\n            value => {\n                const {dispatch} = value;\n                return(\n                <div className=\"card mb-3\">\n                <div className=\"card-header\">\n                    Edit Contact\n                </div>\n                <div className=\"card-body\">\n                    <form onSubmit= {this.onSubmit.bind(this,dispatch)}>\n                       <TextInputGroup\n                                label=\"Name\"\n                                name=\"name\"\n                                placeholder=\"Enter Name\"\n                                value = {name}\n                                onChange={this.onChange}\n                                error={errors.name}\n                                />\n                         <TextInputGroup\n                                label=\"Email\"\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"Enter Email\"\n                                value = {email}\n                                onChange={this.onChange}\n                                error={errors.email}\n                                \n                                />\n                         <TextInputGroup\n                                label=\"Phone\"\n                                name=\"phone\"\n                                placeholder=\"Enter Phone\"\n                                value = {phone}\n                                onChange={this.onChange}\n                                error={errors.phone}\n                                />            \n                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\"/>\n                    </form>\n                </div>\n            </div>\n                )\n            }\n            \n            \n            }</Consumer>\n        )\n    }\n}\nexport default EditContact;","import React, {Component} from 'react';\nimport Header from './Components/layout/Header'\nimport { HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Contacts from './Components/contacts/Contacts'\nimport AddContact from './Components/contacts/AddContact'\nimport {Provider} from './context'\nimport NotFound from './Components/pages/NotFound'\nimport About from './Components/pages/About';\nimport Test from './Components/test/Test'\nimport EditContact from './Components/contacts/EditContact'\nclass App extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: ''\n    }\n    render() {\n        return (\n            <Provider>\n                <Router>\n                <div className=\"App\">\n                    <Header branding=\"Contact Manager\"/>\n                    <div className=\"container\">\n                    <Switch>\n                        <Route exact path=\"/\" component = {Contacts}/>\n                        <Route exact path=\"/contact/add\" component = {AddContact}/>\n                        <Route exact path=\"/contact/edit/:id\" component = {EditContact}/>\n                        <Route exact path=\"/about\" component = {About}/>\n                        <Route exact path=\"/test\" component = {Test}/>\n                        <Route component={NotFound}/>\n                    </Switch>\n                    </div>               \n                </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App/>,document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}